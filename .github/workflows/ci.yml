name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
        
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      
    - name: Check formatting
      run: cargo fmt --all -- --check
      
    - name: Run Clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      
    - name: Run tests
      run: cargo test --verbose
      
    - name: Build release
      run: cargo build --release --verbose

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Run security audit
      run: cargo audit

  build-binaries:
    name: Build Release Binaries
    needs: [test, security]
    if: github.event_name == 'release'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            binary-suffix: ""
          - os: ubuntu-latest  
            target: aarch64-unknown-linux-gnu
            binary-suffix: ""
          - os: macos-latest
            target: x86_64-apple-darwin
            binary-suffix: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            binary-suffix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            binary-suffix: ".exe"
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}
        
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      
    - name: Install cross-compilation tools (Linux ARM64)
      if: matrix.target == 'aarch64-unknown-linux-gnu'
      run: |
        sudo apt update
        sudo apt install -y gcc-aarch64-linux-gnu
        echo "CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
        
    - name: Build release binary
      run: cargo build --release --target ${{ matrix.target }}
      
    - name: Create release archive
      shell: bash
      run: |
        binary_name="tree-txt${{ matrix.binary-suffix }}"
        archive_name="tree-txt-${{ github.ref_name }}-${{ matrix.target }}"
        
        mkdir -p "dist/$archive_name"
        cp "target/${{ matrix.target }}/release/$binary_name" "dist/$archive_name/"
        cp README.md "dist/$archive_name/"
        cp LICENSE "dist/$archive_name/"
        
        cd dist
        if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
          7z a "${archive_name}.zip" "$archive_name"
          echo "ASSET=${archive_name}.zip" >> $GITHUB_ENV
        else
          tar czf "${archive_name}.tar.gz" "$archive_name"
          echo "ASSET=${archive_name}.tar.gz" >> $GITHUB_ENV
        fi
        
    - name: Upload release asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: dist/${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream

  publish-crates:
    name: Publish to crates.io
    needs: [test, security]
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2
      
    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CRATES_TOKEN }}

  update-homebrew:
    name: Update Homebrew Formula
    needs: [build-binaries]
    if: github.event_name == 'release'
    runs-on: macos-latest
    
    steps:
    - name: Extract version
      id: extract_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
    - name: Update Homebrew formula
      uses: dawidd6/action-homebrew-bump-formula@v3
      with:
        token: ${{ secrets.HOMEBREW_TOKEN }}
        formula: tree-txt
        tag: ${{ github.ref }}
        force: false

  create-linux-packages:
    name: Create Linux Packages
    needs: [build-binaries]
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download Linux binary
      uses: actions/download-artifact@v3
      with:
        name: tree-txt-x86_64-unknown-linux-gnu
        path: ./binary
        
    - name: Install packaging tools
      run: |
        sudo apt update
        sudo apt install -y rpm alien
        
    - name: Create DEB package
      run: |
        mkdir -p tree-txt-deb/usr/bin
        mkdir -p tree-txt-deb/usr/share/doc/tree-txt
        
        cp binary/tree-txt tree-txt-deb/usr/bin/
        cp README.md tree-txt-deb/usr/share/doc/tree-txt/
        cp LICENSE tree-txt-deb/usr/share/doc/tree-txt/
        
        mkdir -p tree-txt-deb/DEBIAN
        cat > tree-txt-deb/DEBIAN/control << EOF
        Package: tree-txt
        Version: ${{ github.ref_name }}
        Architecture: amd64
        Maintainer: Mirza Bicer <dev-mirzabicer@users.noreply.github.com>
        Description: Interactive file selector and codebase exporter
         Generate beautiful, formatted text files from your project structure
         with an intuitive terminal interface.
        EOF
        
        dpkg-deb --build tree-txt-deb
        mv tree-txt-deb.deb tree-txt-${{ github.ref_name }}-amd64.deb
        
    - name: Create RPM package
      run: |
        alien -r tree-txt-${{ github.ref_name }}-amd64.deb
        
    - name: Upload DEB package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: tree-txt-${{ github.ref_name }}-amd64.deb
        asset_name: tree-txt-${{ github.ref_name }}-amd64.deb
        asset_content_type: application/vnd.debian.binary-package
        
    - name: Upload RPM package
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: tree-txt-${{ github.ref_name }}-2.x86_64.rpm
        asset_name: tree-txt-${{ github.ref_name }}-x86_64.rpm
        asset_content_type: application/x-rpm