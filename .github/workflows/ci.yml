name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
    steps:
      - uses: actions/checkout@v5

      # When passing the "toolchain" input, use @master (per README)
      - uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
          components: rustfmt, clippy

      - uses: Swatinem/rust-cache@v2

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run Clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Run tests
        run: cargo test --verbose

      - name: Build release
        run: cargo build --release --verbose

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Install cargo-audit
        run: cargo install --locked cargo-audit
      - name: Run security audit
        run: cargo audit

  build-binaries:
    name: Build Release Binaries
    needs: [test, security]
    if: github.event_name == 'release'
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            archive_ext: .tar.gz
            bin_suffix: ""
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            archive_ext: .tar.gz
            bin_suffix: ""
          - os: macos-latest
            target: aarch64-apple-darwin
            archive_ext: .tar.gz
            bin_suffix: ""
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            archive_ext: .zip
            bin_suffix: .exe

    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      - uses: Swatinem/rust-cache@v2

      - name: Install cross-compile linker (Linux aarch64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
        env:
          DEBIAN_FRONTEND: noninteractive

      - name: Build (aarch64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        shell: bash
        run: cargo build --release --target ${{ matrix.target }}
        env:
          CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc

      - name: Build (other targets)
        if: matrix.target != 'aarch64-unknown-linux-gnu'
        shell: bash
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package archive
        shell: bash
        run: |
          BIN="tree-txt${{ matrix.bin_suffix }}"
          TGT="${{ matrix.target }}"
          VER="${{ github.event.release.tag_name || github.ref_name }}"
          ARCHIVE="tree-txt-${VER}-${TGT}"

          mkdir -p "dist/$ARCHIVE"
          cp "target/${TGT}/release/${BIN}" "dist/$ARCHIVE/"
          cp README.md "dist/$ARCHIVE/"
          cp LICENSE "dist/$ARCHIVE/"
          cd dist

          if [[ "${{ matrix.archive_ext }}" == ".zip" ]]; then
            pwsh -NoLogo -NoProfile -Command "Compress-Archive -Path '$ARCHIVE/*' -DestinationPath '${ARCHIVE}.zip'"
          else
            tar czf "${ARCHIVE}.tar.gz" "$ARCHIVE"
          fi

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: tree-txt-${{ github.event.release.tag_name || github.ref_name }}-${{ matrix.target }}
          path: |
            dist/*.tar.gz
            dist/*.zip

  create-linux-packages:
    name: Create Linux Packages
    needs: [build-binaries]
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/download-artifact@v5
        with:
          name: tree-txt-${{ github.event.release.tag_name || github.ref_name }}-x86_64-unknown-linux-gnu
          path: ./binary

      - name: Install packaging tools
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm
          cargo install --locked cargo-deb
          cargo install --locked cargo-generate-rpm

      # Build proper packages from Cargo metadata instead of hand-rolling control files:
      - name: Build DEB
        run: cargo deb --no-build --target x86_64-unknown-linux-gnu --output ./
      - name: Build RPM
        run: cargo generate-rpm --target x86_64-unknown-linux-gnu --output ./

      - name: Upload packages to Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            ./*.deb
            ./*.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-crates:
    name: Publish to crates.io
    needs: [test, security]
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2
      - name: Publish to crates.io
        run: cargo publish --token ${{ secrets.CRATES_TOKEN }}

  update-homebrew:
    name: Update Homebrew Formula
    needs: [build-binaries]
    if: github.event_name == 'release'
    runs-on: macos-latest
    steps:
      - name: Update formula in tap/core
        uses: dawidd6/action-homebrew-bump-formula@v3
        with:
          tap: dev-mirzabicer/homebrew-tap
          token: ${{ secrets.HOMEBREW_TOKEN }}
          formula: tree-txt
          tag: ${{ github.ref }}
          force: false
